<?xml version="1.0" encoding="UTF-8"?>
<project name="swank_server" default="help">

<!-- The local.properties file is created and updated by the 'android'
     tool.
     It contains the path to the SDK. It should *NOT* be checked into
     Version Control Systems. -->
    <property file="local.properties" />

    <!-- file for properties that are local by definition (not checked in!)
	 but not auto generated by the sdk. -->
    <property file="local.user.properties"/>

    <!-- The build.properties file can be created by you and is never touched
         by the 'android' tool. This is the place to change some of the
         default property values used by the Ant rules.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="build.properties" />

    <!-- The default.properties file is created and updated by the 'android'
         tool, as well as ADT.
         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <property file="default.properties" />


    <!-- Required pre-setup import -->
    <import file="${sdk.dir}/tools/ant/pre_setup.xml" />


<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    [This is typically used for code obfuscation.
     Compiled code location: ${out.classes.absolute.dir}
     If this is not done in place, override ${out.dex.input.absolute.dir}]
    <target name="-post-compile">
    </target>
-->

<!-- Compiles this project's .java files into .class files. -->
<target name="compile" depends="-pre-build, -aidl, -renderscript, -resource-src, -pre-compile"
	description="Compiles project's .java files into .class files">
  <if condition="${manifest.hasCode}">
    <then>
      <!-- If android rules are used for a test project, its classpath should include
	   tested project's location -->
      <condition property="extensible.classpath"
		 value="${tested.project.absolute.dir}/bin/classes"
		 else=".">
	<isset property="tested.project.absolute.dir" />
      </condition>
      <condition property="extensible.libs.classpath"
		 value="${tested.project.absolute.dir}/libs"
		 else="${jar.libs.dir}">
	<isset property="tested.project.absolute.dir" />
      </condition>
      <javac encoding="${java.encoding}"
	     source="${java.source}" target="${java.target}"
	     debug="true" extdirs=""
	     destdir="${out.classes.absolute.dir}"
	     bootclasspathref="android.target.classpath"
	     verbose="${verbose}"
	     classpath="${extensible.classpath}"
	     classpathref="jar.libs.ref">
	<src path="${source.absolute.dir}" />
	<src path="${gen.absolute.dir}" />
	<src refid="project.libraries.src" />
	<classpath>
	  <fileset dir="${extensible.libs.classpath}" includes="*.jar" />
	</classpath>
      </javac>

      <java classname="clojure.lang.Compile"
            classpath="${clojure-jar}:${android-jar}:${clj-android-jar}:${swank-clojure-android-jar}:${out.classes.absolute.dir}:${source.absolute.dir}"
            failonerror="true">
        <sysproperty key="clojure.compile.path" value="${out.classes.absolute.dir}"/>
        <arg value="${clojure-namespace}"/>
      </java>
    </then>
    <else>
      <echo>hasCode = false. Skipping...</echo>
    </else>
  </if>
</target>

<!-- Configurable macro, which allows to pass as parameters output directory,
     output dex filename and external libraries to dex (optional) -->
<macrodef name="dex-helper2">
  <element name="external-libs" optional="yes" />
  <element name="extra-parameters" optional="yes" />
  <sequential>
    <!-- sets the primary input for dex. If a pre-dex task sets it to
	 something else this has no effect -->
    <property name="out.dex.input.absolute.dir" value="${out.classes.absolute.dir}" />

    <!-- set the secondary dx input: the project (and library) jar files
	 If a pre-dex task sets it to something else this has no effect -->
    <if>
      <condition>
	<isreference refid="out.dex.jar.input.ref" />
      </condition>
      <else>
	<path id="out.dex.jar.input.ref">
	  <path refid="jar.libs.ref" />
	</path>
      </else>
    </if>

    <echo>Converting compiled files and external libraries into ${intermediate.dex.file}...</echo>
    <apply executable="${dx}" failonerror="true" parallel="true">
      <arg value="-JXmx700M" />
      <arg value="--dex" />
      <arg value="--no-locals" />
      <arg value="--output=${intermediate.dex.file}" />
      <arg path="${out.classes.dir}" />
      <fileset dir="${jar.libs.dir}" includes="*.jar"/>
      <arg path="${clojure-jar}"/>
      <arg path="${clj-android-jar}"/>
<!--      <extra-parameters />
      <arg line="${verbose.option}" />
      <arg path="${out.dex.input.absolute.dir}" />
      <path refid="out.dex.jar.input.ref" />
-->
      <external-libs />
    </apply>
  </sequential>
</macrodef>

<!-- Converts this project's .class files into .dex files -->
<target name="-dex" depends="compile, -post-compile, -obfuscate"
	unless="do.not.compile">
  <if condition="${manifest.hasCode}">
    <then>
      <dex-helper2 />
    </then>
    <else>
      <echo>hasCode = false. Skipping...</echo>
    </else>
  </if>
</target>

    <!-- Execute the Android Setup task that will setup some properties
         specific to the target, and import the build rules files.

         The rules file is imported from
            <SDK>/tools/ant/
         Depending on the project type it can be either:
         - main_rules.xml
         - lib_rules.xml
         - test_rules.xml

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <setup> task.
             - customize it to your needs.
         - Customize the whole script.
             - copy/paste the content of the rules files (minus the top node)
               into this file, *after* the <setup> task
             - disable the import of the rules by changing the setup task
               below to <setup import="false" />.
             - customize to your needs.
    -->
    <setup />

</project>
